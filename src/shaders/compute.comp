#version 450
#extension GL_ARB_separate_shader_objects : enable

#define G 4
#define WS 10
#define WF 0.5

#define CULLING 1
#define MAX_DIST 2.0
#define BUCKETS 10

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

layout(set = 2, binding = 0) buffer Blades {
    Blade blades[];  
};
layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 2) buffer NumBlades {
 	uint vertexCount;   // Write the number of blades remaining here
 	uint instanceCount; // = 1
 	uint firstVertex;   // = 0
 	uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool inFrustum(vec3 p) {
    vec4 pp = camera.proj * camera.view * vec4(p, 1.0);
    float h = pp.w + 0.01;
    return inBounds(pp.x, h) ^^ inBounds(pp.y, h) ^^ inBounds(pp.z, h);
}

/*
*  Noise function taken directly from: https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83 
*/
float rand(vec2 n) { 
	return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
}

float noise(vec2 p){
	vec2 ip = floor(p);
	vec2 u = fract(p);
	u = u*u*(3.0-2.0*u);
	
	float res = mix(
		mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),
		mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);
	return res*res;
}

vec3 windFunc(float t, vec3 v0){
    float n = noise(v0.xz);
    return WS*vec3(sin(t)+n, 0, sin(t)+n);
}

void main() {

    uint index = gl_GlobalInvocationID.x;

	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
        numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    Blade b = blades[index];

    // Extract Parameters
    vec3 up = b.up.xyz;
    vec3 v0 = b.v0.xyz;
    vec3 v1 = b.v1.xyz;
    vec3 v2 = b.v2.xyz;
    float h = b.v1.w;
    float k = b.up.w;
    float theta = b.v0.w;

    // Gravity
    vec4 D = vec4(0.0, -1.0, 0.0, G);

    vec3 t1 = vec3(1.0, 0.0, 0.0);  // TODO: How to determine this?
    t1 = cos(theta)*t1 + sin(theta)*cross(up, t1) + (1 - cos(theta))*dot(up, t1)*up;
    vec3 t0 = normalize(v2 - v0);
    t1 = normalize(t1);
    vec3 f = normalize(cross(t0, t1));

    vec3 ge = D.xyz * D.w;
    vec3 gf = 0.25 * length(ge) * f;
    vec3 g = ge + gf;

    // Recovery
    vec3 iv2 = v0 + up * h;
    vec3 r = (iv2 - v2) * k;

    // Wind
    vec3 windDir = windFunc(totalTime, v0);
    float fd = 1 - length(dot(normalize(windDir), normalize(v2-v0)));
    float fr = dot((v2 - v0), up) / h;
    vec3 w = windDir * (fd * fr);

    v2 += (r + g + w) * deltaTime;

    // State Validation
    v2 = v2 - up * min(dot(up, v2 - v0), 0);
    
    float lproj = length(v2 - v0 - up*dot(v2-v0, up));
    v1 = v0 + h*up*max(1 - lproj/h, 0.05*max(lproj/h, 1));

    float L0 = distance(v2, v0);
    float L1 = distance(v1, v0) + distance(v2, v1);
    float L = 0.25*(2*L0 + 2*L1);   // cubic bezier curve
    float ratio = h/L;

    v1 = v0 + ratio*(v1 - v0);
    v2 = v1 + ratio*(v2 - v1);

    // Update buffer
    blades[index].v1.xyz = v1.xyz;
    blades[index].v2.xyz = v2.xyz;

    if (CULLING == 1) {
        // Orientation Culling
        vec3 c = camera.view[3].xyz;
        if (0.9 > abs(dot(normalize(v0 - c), t1)))
            return;

        // View-Frustum Culling
        vec3 m = 0.25*v0 + 0.5*v1 + 0.25*v2;
        if (!inFrustum(v0) && !inFrustum(v2) && !inFrustum(m))
            return;

        // Distance Culling
        float dproj = length(v0 - c - up*dot(v0 - c, up));
        int n = int(floor(dproj/(MAX_DIST/BUCKETS)));
        if (index % n < n*(1.0-dproj/MAX_DIST))
            return;
    }

    // NOTE: atomicAdd returns the value of vertexCount right before the addition
    // which guarantees that it would be the index for the culledBlades array
    uint idx = atomicAdd(numBlades.vertexCount, 1);
    culledBlades[idx] = blades[index];
}
