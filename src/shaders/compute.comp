#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32

// TODO: update definitions depending on desired result
#define FORCE // Uncomment to simulate forces
#define WIND // Uncomment to simulate wind
#define ORIENTATION_CULLING
#define VIEW_FRUSTUM_CULLING
#define DISTANCE_CULLING

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

layout(set = 2, binding = 0) buffer InputBlades {
    Blade inputBlades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

 layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
 } numBlades;

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // get required variables
    vec3 v0 = vec3(inputBlades[gl_GlobalInvocationID.x].v0);
    vec3 v1 = vec3(inputBlades[gl_GlobalInvocationID.x].v1);
    vec3 v2 = vec3(inputBlades[gl_GlobalInvocationID.x].v2);
    vec3 up = vec3(inputBlades[gl_GlobalInvocationID.x].up);
    float theta = inputBlades[gl_GlobalInvocationID.x].v0.w;
    float height = inputBlades[gl_GlobalInvocationID.x].v1.w;
    float width = inputBlades[gl_GlobalInvocationID.x].v2.w;
    float stiffness = inputBlades[gl_GlobalInvocationID.x].up.w;

    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;


    // TODO: calculate forces
    vec3 recovery = vec3(0.0);
    vec3 gravity = vec3(0.0);
    vec3 wind = vec3(0.0);

    /** recovery */
    vec3 i_v2 = v0 + up * height;
    recovery = (i_v2 - v2) * stiffness;

    /** gravity */ 
    vec3 gE = vec3(0, -1, 0) * 9.80665f;
    vec3 bitangent = vec3(cos(theta), 0, -sin(theta)); 
    vec3 norm = cross(up, bitangent);
    vec3 gF = 0.25f * length(gE) * norm;

    gravity = gE + gF;

    /** wind */
    float maxWindStrength = 2.f; // TODO: update to your own liking
    float windSpeed = 2.f; // TODO: update to your own liking
    vec4 windDirection = vec4(-0.5f, 0.5f, 0, maxWindStrength * cos(windSpeed * totalTime + 0.25 * v0));
    float windAlignment = abs(dot(windDirection.xyz, norm));
    
    #ifdef WIND
    wind = normalize(windDirection.xyz) * windAlignment * windDirection.w;
    #endif

    #ifdef FORCE
    vec3 delta = (recovery + gravity + wind) * deltaTime;
    #else
    vec3 delta = vec3(0);
    #endif

    // update the position of v2
    v2 += delta; // translate based on force
    v2 -= up * min(dot(up, v2 - v0), 0); // ensure valid posiiton of v2

    // update the position of v1
    float lProj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + height * up * max(1 - lProj / height, 0.05 * max(lProj/height, 1));

    // ensure length of curve is valid
    float L0 = length(v2 - v0);
    float L1 = length(v2 - v1) + length(v1 - v0);
    float L = (2 * L0 + L1) / 3;

    float r = height / L;

    // TODO: implement correctly first
    v1 = v0 + r * (v1 - v0);
    v2 = v1 + r * (v2 - v1);

    // update vectors
    inputBlades[gl_GlobalInvocationID.x].v1 = vec4(v1,inputBlades[gl_GlobalInvocationID.x].v1.w);
    inputBlades[gl_GlobalInvocationID.x].v2 = vec4(v2, inputBlades[gl_GlobalInvocationID.x].v2.w);

    barrier();

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    bool culled = false; 

    // Orientation test
    #ifdef ORIENTATION_CULLING
    vec3 eye = vec3(inverse(camera.view) * vec4(0.f, 0.f, 0.f, 1.f));
    vec3 dirC = eye - v0;
    float dotProd = abs(dot(normalize(dirC), normalize(bitangent)));
    
    // TODO: implement correctly first
    if (dotProd > 0.9)
       culled = true;
    #endif

    // view-frustum test
    #ifdef VIEW_FRUSTUM_CULLING
    // TODO: verify this is working
    mat4 viewProj = camera.proj * camera.view;
    
    vec4 normalizedV0 = viewProj * vec4(v0, 1.f);
    vec4 normalizedM = viewProj * vec4(m, 1.f);
    vec4 normalizedV2 = viewProj * vec4(v2, 1.f);
    
    float tolerance = 0.01f; // TODO: need changing?
    float toleranceV0 = normalizedV0.w  + tolerance;
    float toleranceM = normalizedM.w + tolerance;
    float toleranceV2 = normalizedV2.w + tolerance;

    bool v0Test = inBounds(normalizedV0.x, toleranceV0) && 
                  inBounds(normalizedV0.y, toleranceV0) && 
                  inBounds(normalizedV0.z, toleranceV0);
    bool MTest = inBounds(normalizedM.x, toleranceM) && 
                  inBounds(normalizedM.y, toleranceM) && 
                  inBounds(normalizedM.z, toleranceM);
    bool v2Test = inBounds(normalizedV2.x, toleranceV2) && 
                  inBounds(normalizedV2.y, toleranceV2) && 
                  inBounds(normalizedV2.z, toleranceV2);

    if (!v0Test && !MTest && !v2Test)
        culled = true;
    #endif

    // Distance Test 
    #ifdef DISTANCE_CULLING
    float dProj = length(v0 - eye - up * dot((v0 - eye), up));
    float dMax = 60.f; // TODO: find the ideal number
    uint id = gl_GlobalInvocationID.x;
    uint n = 10; // TODO: find the ideal number

    if (mod(id, n) >= (n * (1 - dProj / dMax)))
        culled = true;
    #endif

    if (!culled)
    {
        // If we did not remove the blade, add it to the culled blades buffer and increment
        // our vertex count with an atomic addition.
        culledBlades[atomicAdd(numBlades.vertexCount, 1)] = inputBlades[gl_GlobalInvocationID.x];
    }
}
